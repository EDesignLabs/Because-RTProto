// Generated by CoffeeScript 1.4.0

define(["d3view"], function(D3View) {
  var NoteView;
  return NoteView = D3View.extend({
    tagName: 'g',
    initialize: function(options) {
      this.constructor.__super__.initialize.call(this, options);
      this.model.get('hx').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onHandleXChanged, this));
      this.model.get('hy').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onHandleYChanged, this));
      this.dispatcher.on('tool:engage', _.bind(this.onToolEngage, this));
      this.dispatcher.on('tool:move', _.bind(this.onToolMove, this));
      return this.dispatcher.on('tool:release', _.bind(this.onToolRelease, this));
    },
    onHandleXChanged: function(rtEvent) {
      if (this.lineElement) {
        this.lineElement.attr({
          'x2': this.model.get('hx').getText() || 200
        });
      }
      return this.circleElement.attr({
        'cx': this.model.get('hx').getText() || 200
      });
    },
    onHandleYChanged: function(rtEvent) {
      if (this.lineElement) {
        this.lineElement.attr({
          'y2': this.model.get('hy').getText() || 25
        });
      }
      return this.circleElement.attr({
        'cy': this.model.get('hy').getText() || 25
      });
    },
    onToolEngage: function(ev, tool) {
      var target;
      target = d3.select(ev.target);
      if (target.attr('data-object-id') === this.model.id && target.attr('data-type') === 'handle-circle' && this.model.get('userId').getText() === tool.user.userId) {
        if (tool.type === 'move') {
          this.engaged = true;
          if (this.lineElement) {
            this.lineElement.attr('opacity', 1.0);
          }
          this.offsetX = ev.clientX - this.circleElement.node().offsetLeft - this.circleElement.attr('cx');
          return this.offsetY = ev.clientY - this.circleElement.node().offsetTop - this.circleElement.attr('cy');
        }
      }
    },
    onToolMove: function(ev, tool) {
      var target, x, y;
      target = d3.select(ev.target);
      if (this.engaged) {
        if (tool.type === 'move') {
          x = ev.clientX - this.circleElement.node().offsetLeft - this.offsetX;
          y = ev.clientY - this.circleElement.node().offsetTop - this.offsetY;
          this.circleElement.attr('cx', x);
          this.circleElement.attr('cy', y);
          if (this.lineElement) {
            this.lineElement.attr('x2', x);
          }
          if (this.lineElement) {
            return this.lineElement.attr('y2', y);
          }
        }
      }
    },
    onToolRelease: function(ev, tool) {
      var cx, cy, target;
      target = d3.select(ev.target);
      if (this.engaged) {
        if (tool.type === 'move') {
          cx = this.circleElement.attr('cx');
          cy = this.circleElement.attr('cy');
          this.model.get('hx').setText(cx);
          this.model.get('hy').setText(cy);
          return this.engaged = false;
        }
      }
    },
    render: function() {
      var _ref;
      this.d3el.attr({
        'id': 'handle-' + this.model.id,
        'data-type': 'handle',
        'data-object-id': this.model.id
      });
      if (this.model.get('title').getText()) {
        if (!this.lineElement) {
          this.lineElement = this.d3el.append('line');
        }
        this.lineElement.attr({
          'id': 'handle-line-' + this.model.id,
          'x1': 100,
          'y1': 25,
          'x2': this.model.get('hx').getText() || 200,
          'y2': this.model.get('hy').getText() || 25,
          'stroke': 'black',
          'strokeWidth': 2,
          'opacity': this.model.get('selected').getText() === 'true' ? 0.0 : 1.0,
          'data-type': 'handle-line',
          'data-object-id': this.model.id
        });
      }
      if (!this.circleElement) {
        this.circleElement = this.d3el.append('circle');
      }
      return this.circleElement.attr({
        'id': 'handle-circle-' + this.model.id,
        'r': 5,
        'cx': this.model.get('hx').getText() || 200,
        'cy': this.model.get('hy').getText() || 25,
        'fill': ((_ref = this.model.get('color')) != null ? _ref.getText() : void 0) || 'gray',
        'stroke': this.model.get('selected').getText() === 'true' ? 'black' : 'darkslateblue',
        'strokeWidth': 10,
        'data-type': 'handle-circle',
        'data-object-id': this.model.id
      });
    }
  });
});
