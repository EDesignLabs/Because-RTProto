// Generated by CoffeeScript 1.4.0

define(['context-view', 'note-view', 'marker-view'], function(ContextView, NoteView, MarkerView) {
  var WorkspaceView;
  return WorkspaceView = Backbone.View.extend({
    className: 'span12',
    initialize: function(options) {
      var data,
        _this = this;
      Backbone.View.prototype.initialize.call(this, options);
      this.dispatcher = options.dispatcher;
      this.setElement(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));
      this.d3el = d3.select(this.el);
      this.model.addEventListener(gapi.drive.realtime.EventType.OBJECT_CHANGED, _.bind(this.onObjectChanged, this));
      this.model.get('notes').addEventListener(gapi.drive.realtime.EventType.VALUES_ADDED, _.bind(this.onNotesAdded, this));
      this.model.get('notes').addEventListener(gapi.drive.realtime.EventType.VALUES_REMOVED, _.bind(this.onNotesRemoved, this));
      this.model.get('markers').addEventListener(gapi.drive.realtime.EventType.VALUES_ADDED, _.bind(this.onMarkersAdded, this));
      this.model.get('markers').addEventListener(gapi.drive.realtime.EventType.VALUES_REMOVED, _.bind(this.onMarkersRemoved, this));
      this.d3el.on('mousedown', _.bind(this.onMouseDown, this));
      this.d3el.on('mousemove', _.bind(this.onMouseMove, this));
      this.d3el.on('mouseup', _.bind(this.onMouseUp, this));
      this.dispatcher.on('marker:delete', function(model) {
        var index;
        index = _this.model.get('markers').indexOf(model);
        if (index != null) {
          return _this.model.get('markers').remove(index);
        }
      });
      this.dispatcher.on('note:delete', function(model) {
        var index;
        index = _this.model.get('notes').indexOf(model);
        if (index != null) {
          return _this.model.get('notes').remove(index);
        }
      });
      this.dispatcher.on('tool:set', function(tool) {
        _this.tool = tool;
        _this.d3el.classed('move', _this.tool.type === 'move');
        return _this.d3el.classed('delete', _this.tool.type === 'delete');
      });
      data = this.model.get('data');
      this.contextView = new ContextView({
        model: data.get('image'),
        parent: this.d3el,
        dispatcher: this.dispatcher
      });
      _.each(this.model.get('markers').asArray(), function(marker) {
        return this.addMarker(marker);
      }, this);
      return _.each(this.model.get('notes').asArray(), function(note) {
        return this.addNote(note);
      }, this);
    },
    onMouseDown: function(ev) {
      return this.dispatcher.trigger('tool:engage', d3.event, this.tool);
    },
    onMouseMove: function(ev) {
      return this.dispatcher.trigger('tool:move', d3.event, this.tool);
    },
    onMouseUp: function(ev) {
      return this.dispatcher.trigger('tool:release', d3.event, this.tool);
    },
    onObjectChanged: function() {},
    onNotesAdded: function(rtEvent) {
      return _.each(rtEvent.values, function(note) {
        return this.addNote(note);
      }, this);
    },
    onNotesRemoved: function(rtEvent) {
      return _.each(rtEvent.values, function(note) {
        return this.removeObject(note);
      }, this);
    },
    onMarkersAdded: function(rtEvent) {
      return _.each(rtEvent.values, function(marker) {
        return this.addMarker(marker);
      }, this);
    },
    onMarkersRemoved: function(rtEvent) {
      return _.each(rtEvent.values, function(marker) {
        return this.removeObject(marker);
      }, this);
    },
    addNote: function(note) {
      var noteView;
      noteView = new NoteView({
        model: note,
        parent: this.d3el,
        dispatcher: this.dispatcher
      });
      return noteView.render();
    },
    addMarker: function(marker) {
      var markerView;
      markerView = new MarkerView({
        model: marker,
        parent: this.d3el,
        dispatcher: this.dispatcher
      });
      return markerView.render();
    },
    removeObject: function(model) {
      return this.dispatcher.trigger('workspace:remove-object', model);
    },
    render: function() {
      return this.contextView.render();
    }
  });
});
