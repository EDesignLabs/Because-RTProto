// Generated by CoffeeScript 1.6.3
define(['d3view', 'handle-view'], function(D3View, HandleView) {
  var NoteView;
  return NoteView = D3View.extend({
    tagName: 'g',
    initialize: function(options) {
      this.constructor.__super__.initialize.call(this, options);
      this.model.get('x').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onHandlePositionChanged, this));
      this.model.get('y').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onHandlePositionChanged, this));
      this.model.get('title').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onTitleChanged, this));
      this.model.get('desc').addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, _.bind(this.onDescriptionChanged, this));
      this.dispatcher.on('tool:engage', _.bind(this.onToolEngage, this));
      this.dispatcher.on('tool:move', _.bind(this.onToolMove, this));
      return this.dispatcher.on('tool:release', _.bind(this.onToolRelease, this));
    },
    onHandlePositionChanged: function(rtEvent) {
      return this.d3el.attr({
        'transform': "matrix(1 0 0 1 " + (this.model.get('x').getText()) + " " + (this.model.get('y').getText()) + ")"
      });
    },
    onTitleChanged: function(rtEvent) {
      debugger;
    },
    onDescriptionChanged: function(rtEvent) {
      debugger;
    },
    onToolEngage: function(ev, tool) {
      var matrix, target, x, y;
      target = d3.select(ev.target);
      if (target.attr('data-object-id') === this.model.id && target.attr('data-type') === 'note-rect') {
        if (tool === 'delete') {
          this.dispatcher.trigger('note:delete', this.model);
        }
        if (tool === 'move') {
          this.engaged = true;
          matrix = this.d3el.attr('transform').slice(7, -1).split(' ');
          x = matrix[4] !== 'NaN' ? parseInt(matrix[4], 10) : 0;
          y = matrix[5] !== 'NaN' ? parseInt(matrix[5], 10) : 0;
          this.offsetX = ev.clientX - this.el.offsetLeft - x;
          return this.offsetY = ev.clientY - this.el.offsetTop - y;
        }
      }
    },
    onToolMove: function(ev, tool) {
      var target, x, y;
      target = d3.select(ev.target);
      if (this.engaged) {
        if (tool === 'move') {
          x = ev.clientX - this.el.offsetLeft - this.offsetX;
          y = ev.clientY - this.el.offsetTop - this.offsetY;
          return this.d3el.attr('transform', "matrix(1 0 0 1 " + x + " " + y + ")");
        }
      }
    },
    onToolRelease: function(ev, tool) {
      var matrix, target;
      target = d3.select(ev.target);
      if (this.engaged) {
        if (tool === 'move') {
          matrix = this.d3el.attr('transform').slice(7, -1).split(' ');
          this.model.get('x').setText(matrix[4]);
          this.model.get('y').setText(matrix[5]);
          return this.engaged = false;
        }
      }
    },
    render: function() {
      var _ref;
      this.d3el.attr({
        'id': 'note-' + this.model.id,
        'x': 0,
        'y': 0,
        'transform': "matrix(1 0 0 1 " + (this.model.get('x').getText()) + " " + (this.model.get('y').getText()) + ")",
        'data-type': 'note',
        'data-object-id': this.model.id
      });
      if (!this.noteRectElement) {
        this.noteRectElement = this.d3el.append('rect');
      }
      this.noteRectElement.attr({
        'id': 'note-rect-' + this.model.id,
        'width': 100,
        'height': 50,
        'fill': this.model.get('selected').getText() === 'true' ? 'white' : 'lightsteelblue',
        'stroke': ((_ref = this.model.get('color')) != null ? _ref.getText() : void 0) || 'gray',
        'data-type': 'note-rect',
        'data-object-id': this.model.id
      });
      if (!this.titleElement) {
        this.titleElement = this.d3el.append('text').text(this.model.get('title').getText());
      }
      this.titleElement.attr({
        'id': 'note-title-' + this.model.id,
        'style': 'fill:black;stroke:none',
        'x': 5,
        'y': 15,
        'font-size': 12,
        'data-type': 'title',
        'data-object-id': this.model.id
      });
      if (!this.descElement) {
        this.descElement = this.d3el.append('text').text(this.model.get('desc').getText());
      }
      this.descElement.attr({
        'id': 'note-desc-' + this.model.id,
        'style': 'fill:blue;stroke:none',
        'x': 5,
        'y': 30,
        'width': 50,
        'height': 'auto',
        'font-size': 8,
        'data-type': 'note-rect',
        'data-object-id': this.model.id
      });
      if (!this.handleView) {
        this.handleView = new HandleView({
          model: this.model,
          parent: this.d3el,
          dispatcher: this.dispatcher
        });
        return this.handleView.render();
      }
    }
  });
});
